#+OPTIONS: toc:nil
#+OPTIONS: num:nil

* The HEGP challenge

The authors announce the HEGP (heegeepee;
/hiːdʒiːpiː/) Challenge, with a $1,000 (one thousand dollar) prize for
the individual or group who can crack HEGP encrypted data.

/See this [[./start][page]] for a general guide on HEGP and the cracking challenge/

* Details

The authors offer a reward of $1000 (one thousand US dollar) for
cracking the HEGP homomorphic encryption method for genotypes and
phenotypes as described in this open access [[https://www.genetics.org/content/215/2/359][paper]].

The challenge consists of decryption of two genotype data sets.

In both data sets, plain text genotypes are represented numerically as
matrices of allele dosages, with rows representing individuals and
columns representing SNP sites (see below toy example). Each plain text
genotype dosage takes the integer values 0,1,2. After encryption these
dosages are transformed into floating point cyphertexts that are
approximately Normally distributed. You task is to recover the
plain text from the cyphertext.

In HEGP, the ciphertext has been generated by matrix multiplication of
the plaintext genotype matrix by a large random orthogonal matrix (the
key) which is unknown to you. The task therefore is to find the
inverse of this matrix, which because it is orthogonal, will be the
transpose of original key.

For the first challenge we encrypted a data set consisting of 500
individuals by 12,359 SNP genotypes which exists in the public
domain. We consider this data cracked if 50 individuals (10%) are
identified correctly. Note that this data might be from a human,
mouse, rat, nematode or plant dataset. Note also that these genotypes
are a subset of a public dataset, and that any missing genotypes in
the public data have been imputed before encryption. The MD5 checksum
of the ciphertext RData file is
~511c48b858bd3f3f5aa103c712db41b5~. The plaintext and the key have MD5
checksums of ~68f3cefa00d3a71b56ae8fc27ac6e88a~ and
~da874b339a32fe7299ec140079389689~ respectively. The ciphertext file
(146Mb) is available from UCL Figshare with DOI
https://doi.org/10.5522/04/12794999.

This challenge addresses the concern is that individuals might be
identified based on information in the public domain and/or by finding
patterns in the encrypted data.

The second challenge is harder. We encrypted a mammalian data set that
is not in the public domain (yet), comprising 1586 individuals and
12561 SNPs. We consider the code cracked if you compute the plaintext
genotypes of this matrix correctly with mean error of under 10%. The
MD5 checksum for the ciphertext file is
~8bbdc29e3d51dafa224a1af5a9bbadf7~. We will release the plaintext file
and the key file when the challenge is cracked or after six
months. The MD5 checksums for these files are
~a007e8f5f085798a88180386ffbfa58f~ (plaintext genotypes) and
~a9af5b4cd629811e1c2319d794849b2c~ (key). The ciphertext file (146Mb) is
available from UCL Figshare with DOI [[https://doi.org/10.5522/04/12783845]].

The ciphertext Datasets are provided as RData objects which can be manipulated using the hegp R package. Briefly, a dataset D is a list, comprising of minimally a phenotype vector D$y, and a genotype dosage matrix D$geno (rows are individuals, columns are SNPs), and a vector D$af of plaintext minor allele frequencies of the SNPs. There are additional components that are useful for GWAS but not relevant for the decryption challenge. Full details are in the documentation of the R package. The challenge datasets have fake phenotype data that should be ignored.

If you don't want to use the R package, then you can unpack the datasets and write the genotypes and allele frequencies to tab-delimited text files with the R commands:

#+begin_src R
> load("ciphertext2.D.RData")
> write.delim( D$geno, "ciphertext2.tsv", quote=F, row=F )
> write.delim( D$maf, "af2.tsv", quote=F, row=F )
#+end_src

The plaintext allele frequency data might help with decryption as it gives target allele frequencies to aim at (the allele frequencies of the ciphertext are different).

* Toy Example

The task is best described with an small example, a SNP dosage matrix G with 10 subjects (rows) and 8 SNPs (columns):

#+begin_src
sub1     0    1    2    1    1    1    1    2
sub2     0    1    2    1    2    2    2    2
sub3     1    1    2    1    2    2    2    1
sub4     2    1    2    2    1    2    1    1
sub5     2    2    2    0    1    1    2    1
sub6     2    2    2    1    1    2    2    2
sub7     1    2    1    1    1    1    2    2
sub8     0    1    2    1    2    1    2    2
sub9     1    1    2    2    1    1    1    2
sub10    1    2    2    1    2    2    2    1
#+end_src

The first step standardises each column to have mean 0 and variance 1. This does not encrypt the data but it makes the encryption easier to process. The resulting plaintext dosage matrix H is

#+begin_src
sub1  -1.224745e+00 -0.7745967  0.3162278 -0.1761661 -0.7745967 -0.9486833 -1.449138  0.7745967
sub2  -1.224745e+00 -0.7745967  0.3162278 -0.1761661  1.1618950  0.9486833  0.621059  0.7745967
sub3  -5.749536e-10 -0.7745967  0.3162278 -0.1761661  1.1618950  0.9486833  0.621059 -1.1618950
sub4   1.224745e+00 -0.7745967  0.3162278  1.5854946 -0.7745967  0.9486833 -1.449138 -1.1618950
sub5   1.224745e+00  1.1618950  0.3162278 -1.9378267 -0.7745967 -0.9486833  0.621059 -1.1618950
sub6   1.224745e+00  1.1618950  0.3162278 -0.1761661 -0.7745967  0.9486833  0.621059  0.7745967
sub7  -1.761818e-09  1.1618950 -2.8460499 -0.1761661 -0.7745967 -0.9486833  0.621059  0.7745967
sub8  -1.224745e+00 -0.7745967  0.3162278 -0.1761661  1.1618950 -0.9486833  0.621059  0.7745967
sub9   5.584054e-10 -0.7745967  0.3162278  1.5854946 -0.7745967 -0.9486833 -1.449138  0.7745967
sub10 -7.763129e-10  1.1618950  0.3162278 -0.1761661  1.1618950  0.9486833  0.621059 -1.1618950
#+end_src

Next, we sample a random orthogonal 10x10 matrix P (the key)

#+begin_src
 [1,] -0.02512827 -0.4797328  0.07364427  0.29302653 -0.52531836 -0.06077012 -0.035656119 -0.21264789 -0.03656364  0.59199429
 [2,]  0.49690414 -0.2130092 -0.18437213 -0.08094409 -0.33989098  0.11458794  0.382316649  0.51918534 -0.29625914 -0.18714471
 [3,]  0.23650365  0.2027581  0.09184543  0.01711933  0.45947279 -0.11898452  0.549979207  0.04901441  0.03087585  0.60259531
 [4,] -0.12668661  0.2640016 -0.24657807 -0.31047136 -0.08100156  0.01898761 -0.009330209 -0.34743514 -0.77909552  0.14950124
 [5,]  0.55558644 -0.1256327 -0.11075554 -0.35350803  0.12981113  0.51028646 -0.332763562 -0.28269321  0.20446208  0.16914618
 [6,] -0.20079972 -0.1310010  0.33769938 -0.45070382  0.09236098 -0.05672098 -0.390626201  0.58184807 -0.14355153  0.31914343
 [7,]  0.30606137  0.1956211  0.67114299 -0.30536330 -0.32325985 -0.31468499  0.106176504 -0.27993855  0.04238805 -0.17152201
 [8,] -0.31057809 -0.5813563  0.28456863 -0.21173902  0.26275032  0.30931163  0.411201611 -0.21696952 -0.12053771 -0.21059453
 [9,]  0.07808339 -0.3843085 -0.42321573 -0.37251969  0.13692025 -0.68291915 -0.007551188 -0.12694060  0.15450958 -0.05619238
[10,] -0.36775701  0.2383173 -0.23348592 -0.45381168 -0.41614295  0.20969099  0.325976664  0.04578156  0.44759290  0.14716487
#+end_src

Then we encrypt the dosages F = PH to make the ciphertext

#+begin_src
sub1   0.5198393  0.26551339 -0.01916052  1.4507213  0.2713387  1.18915219 -0.7379842 -1.16229696
sub2  -1.3586430 -0.22207809 -1.14214913 -0.1029684 -0.2902612 -1.24575229 -0.1165288  1.69811232
sub3  -0.1600357  1.24824503 -1.06841109 -1.0985638  0.1892755 -0.50328813  0.7284091 -0.62463676
sub4  -0.1988559  1.28854213 -0.43475181 -1.5181190  0.7876347  1.15643550  1.6061022 -0.19111906
sub5   0.1706426  0.64079385  1.16737846 -0.5553653 -0.9595529 -0.17537980 -0.6155911  0.60202029
sub6  -0.8145915 -0.03660399  1.22187582 -1.2021241  2.1778375  0.07512188  1.6196177 -0.61084795
sub7  -1.4268916 -1.30507703 -0.35896396  0.1191278  0.8610707  0.21228333 -0.1347692  0.19297276
sub8   1.7994281  1.79366813 -1.42174710 -0.9805980 -1.1053001 -0.41331874  1.0923847 -0.53943417
sub9  -0.5944334  0.12376342 -0.50869100 -0.3285796 -0.6138749 -2.04363166 -0.7562708  0.08008153
sub10 -0.7061947  0.56034104 -1.04875037  0.7321312  0.4268941 -0.12102879  0.7390060  1.80792099
#+end_src

This form of encryption is homomorphic with respect to many quantitative genetics analyses, particularly the mixed model GWAS.

To decrypt the ciphertext it is necessary to multiply it by the inverse of the key P, which is equal to the transpose of P because it is orthogonal.

The challenge is, in the absence of knowing either P or H, to find an orthogonal matrix Q such that QF "looks like" a genotype dosage matrix. That is, the distribution of the plaintext for a given SNP will be trimodal (or bimodal is the rarer homozygote genotype is absent from the sample) with expected modes specified by the Hardy-Weinberg equilibrium distribution. We provide the allele frequencies in the plaintext, which will help in defining these expected modes. It is reasonable to provide this information even though it might make the encryption less secure because users of the ciphertext would need this information for some genetic analyses.

We provide the toy dataset and its encryption key as R objects in the file "toy.hegp.RData" on this GitHub site so that you can reproduce these analyses.

#+begin_src R
> library(hegp)
> load("toy.hegp.RData") # loads a dataset D.toy and encryption key e.toy
> ciphertext.toy = encrypt.D(plaintext.toy, key.toy)
> decrypt.toy = encrypt.D(ciphertext.toy, key.toy, invert=TRUE)
> mean(abs(decrypt.toy$geno-plaintext.toy$geno))
[1] 2.524352e-09
#+end_src

* Reference code

The reference code for HEGP is published under [[https://www.gnu.org/licenses/gpl-3.0.en.html][GPLv3]] licensed [[https://github.com/encryption4genetics/hegp-R][R code]]
and [[https://github.com/encryption4genetics/hegp-julia][Julia code]]. An example of running a GWA as presented in the paper
can be found [[https://github.com/encryption4genetics/HEGP][here]]. The algorithm with a description of brute force
attack is described in the [[https://www.genetics.org/content/215/2/359#sec-4][results section]].

* Submissions

Submissions should be posted in a permanent public git account
(GitHub, gitlab or similar) and reward will be given in USD.  The
solution should be reproducible and announced on the website [[https://github.com/encryption4genetics/HEGP-website/issues][issue
tracker]]. In case you don't want to use the issue tracker it is also
possible to E-mail the authors to indicate where the solution is
hosted.

* Introduction

The homomorphic encryption method consists of an orthogonal
transformation by multiplication by the orthogonal matrix P with a
matrix containing the data y and G.

@@html: <img src="https://www.genetics.org/content/genetics/215/2/359/F1.large.jpg" width="800" />@@

From the original [[https://www.genetics.org/content/215/2/359#sec-4][paper]]: privacy in relation to quantitative genetic
analysis. (A) A numeric phenotype vector y (left) and genotype dosage
matrix G (right) are represented as colours and shades of gray. Each
row of the matrix represents one individual and each column one
SNP. Genotypes are encoded as imputed dosages clustered at the values
Embedded Image giving the numbers of alternate alleles. (B) The same
data after multiplication by an orthogonal matrix P (a rotation
represented by the curved orange arrow). The genotype dosages are now
represented by a continuum of real numbers. (C) The distribution of
dosages for a particular SNP (column of G), clustered around
0,1,2. (D) The distribution of the same dosages after orthogonal
transformation by multiplication by the orthogonal matrix P (black
histogram) with the normal distribution with same mean and variance
superimposed in red. (F) The normal QQ plot for the data in D, showing
the transformed dosages are very close to a normal distribution. (E) A
cartoon of the HEGP scheme. The top black arrow and equation show the
linear mixed model relating the phenotype y to genotype G with
regression coefficients β representing the allelic effects. The
variance matrix for the residuals is V. After multiplication by
orthogonal matrix P, plaintext data y, G  and the
mixed linear model are transformed as shown in orange. The likelihood
and regression estimates  β are preserved. HEGP,
homomorphic encryption for genotypes and phenotypes; QQ,
quantile–quantile.
