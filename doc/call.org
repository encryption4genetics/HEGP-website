#+OPTIONS: toc:nil
#+OPTIONS: num:nil

* The HEGP challenge

The authors announce the HEGP (heegeepee;
/hiːdʒiːpiː/) Challenge, with a $1,000 (one thousand dollar) prize for
the individual or group who can crack HEGP encrypted data.

/See this [[./start][page]] for a general guide on HEGP and the cracking challenge/

* Details

The authors offer a reward of $1000 (one thousand US dollar) for
cracking the HEGP homomorphic encryption method for genotypes and
phenotypes as described in this open access [[https://www.genetics.org/content/215/2/359][paper]].

The challenge consists of decryption of two genotype data sets. 

In both data sets, plaintext genotypes are represented numerically as matrices of allele dosages, with rows representing individuals and columns representing SNP sites. Each plaintext genotype dosage takes the integer values 0,1,2. After encryption these dosages are trensformed into floating point cyphertexts that are approximately Normally distributed. You task is to recover the plaintext from the cyphertext.

In HEGP, the ciphertext has been generated by matrix multiplication of the plainxt genotype matrix by a large random orthogonal matrix (the key) which is unknown to you. The task therefore is to find the inverse of this matrix, which because it is orthogonal, will be the transpose of original key.

For the first challenge we encrypted a data set consisting of 10,000
SNP genotypes by 200 individuals which exists somewhere in the public
domain. We consider this data cracked if 5 individuals are identified
correctly. Note that this data may be from a human, mouse, rat,
nematode or plant dataset.

The main concern is that individuals get identified based on
information in the public domain and/or by finding patterns in the
encrypted data.

The second challenge is harder. We encrypted a mammalian data set that is
not in the public domain (yet), comprising 1586 individuals and 12561 SNPs. We consider the code cracked if you
compute 30% of the genotypes of this matrix correctly (we specify the
margin of error). The MD5 checksum for the ciphertext file is 8bbdc29e3d51dafa224a1af5a9bbadf7. We will release the plaintext file and the key file when the challenge is cracked or after six months. The MD5 checksums for these files are a007e8f5f085798a88180386ffbfa58f (plaintext genotypes) and a9af5b4cd629811e1c2319d794849b2c (key). The ciphertext file (146Mb) is available from UCL Figshare with DOI 10.5522/04/12783845.

The ciphertext Datasets are provided as RData objects which can be manipulated using the hegp R package. Briefly, a dataset D is a list, comprising of minimally a phenotype vector D$y, and a genotype dosage matrix D$geno (rows are individuals, columns are SNPs), and a vector D$af of plaintext minor allele frequencies of the SNPs. There are additional components that are useful for GWAS but not relevant for the decryption challenge. Full details are in the documentation of the R package. The challenge datasets have fake phenotype data that should be ignored. 

IF you don't want to use the R package, then you can unpack the datasets and write the genotypes and allele frequencies to tab-delimited text files with the R commands:

#+begin_src R
> load("ciphertext2.D.RData")
> write.delim( D$geno, "ciphertext2.tsv", quote=F, row=F )
> write.delim( D$af, "af2.tsv", quote=F, row=F )
#+end_src

The plaintext allele frequency data might help with decryption as it gives target allele frequencies to aim at (the allele frequencies of the ciphertext are different).

* Toy Example

The task is best described with an small example, a SNP dosage matrix with 10 subjects (rows) and 8 SNPs (columns):

#+begin_src
sub1     0    1    2    1    1    1    1    2
sub2     0    1    2    1    2    2    2    2
sub3     1    1    2    1    2    2    2    1
sub4     2    1    2    2    1    2    1    1
sub5     2    2    2    0    1    1    2    1
sub6     2    2    2    1    1    2    2    2
sub7     1    2    1    1    1    1    2    2
sub8     0    1    2    1    2    1    2    2
sub9     1    1    2    2    1    1    1    2
sub10    1    2    2    1    2    2    2    1
#+end_src

The first step standardises each column to have mean 0 and variance 1:

sub1  -1.224745e+00 -0.7745967  0.3162278 -0.1761661 -0.7745967 -0.9486833
sub2  -1.224745e+00 -0.7745967  0.3162278 -0.1761661  1.1618950  0.9486833
sub3  -5.749536e-10 -0.7745967  0.3162278 -0.1761661  1.1618950  0.9486833
sub4   1.224745e+00 -0.7745967  0.3162278  1.5854946 -0.7745967  0.9486833
sub5   1.224745e+00  1.1618950  0.3162278 -1.9378267 -0.7745967 -0.9486833
sub6   1.224745e+00  1.1618950  0.3162278 -0.1761661 -0.7745967  0.9486833
sub7  -1.761818e-09  1.1618950 -2.8460499 -0.1761661 -0.7745967 -0.9486833
sub8  -1.224745e+00 -0.7745967  0.3162278 -0.1761661  1.1618950 -0.9486833
sub9   5.584054e-10 -0.7745967  0.3162278  1.5854946 -0.7745967 -0.9486833
sub10 -7.763129e-10  1.1618950  0.3162278 -0.1761661  1.1618950  0.9486833


* Reference code

The reference code for HEGP currently exists under [[https://www.gnu.org/licenses/gpl-3.0.en.html][GPLv3]] licensed [[https://github.com/encryption4genetics/hegp-R][R
code]] or [[https://github.com/encryption4genetics/hegp-julia][Julia code]]. An example of running a GWA as presented in the
paper can be found [[https://github.com/encryption4genetics/HEGP][here]]. The algorithm with a description of brute
force attack is described in the [[https://www.genetics.org/content/215/2/359#sec-4][results section]].

* Submissions

Submissions should be posted in a public git account (github, gitlab
or similar), and reward will be given in USD.  The solution should be
reproducible and announced on the website [[https://github.com/encryption4genetics/HEGP-website/issues][issue tracker]].

* Introduction

The homomorphic encryption method consists of an orthogonal
transformation by multiplication by the orthogonal matrix P with a
matrix containing the data y and G.

@@html: <img src="https://www.genetics.org/content/genetics/215/2/359/F1.large.jpg" width="800" />@@

From the original [[https://www.genetics.org/content/215/2/359#sec-4][paper]]: privacy in relation to quantitative genetic
analysis. (A) A numeric phenotype vector y (left) and genotype dosage
matrix G (right) are represented as colors and shades of gray. Each
row of the matrix represents one individual and each column one
SNP. Genotypes are encoded as imputed dosages clustered at the values
Embedded Image giving the numbers of alternate alleles. (B) The same
data after multiplication by an orthogonal matrix P (a rotation
represented by the curved orange arrow). The genotype dosages are now
represented by a continuum of real numbers. (C) The distribution of
dosages for a particular SNP (column of G), clustered around
0,1,2. (D) The distribution of the same dosages after orthogonal
transformation by multiplication by the orthogonal matrix P (black
histogram) with the normal distribution with same mean and variance
superimposed in red. (F) The normal QQ plot for the data in D, showing
the transformed dosages are very close to a normal distribution. (E) A
cartoon of the HEGP scheme. The top black arrow and equation show the
linear mixed model relating the phenotype y to genotype G with
regression coefficients β representing the allelic effects. The
variance matrix for the residuals is V. After multiplication by
orthogonal matrix P, plaintext data y, G  and the
mixed linear model are transformed as shown in orange. The likelihood
and regression estimates  β are preserved. HEGP,
homomorphic encryption for genotypes and phenotypes; QQ,
quantile–quantile.
